const { App } = require("@slack/bolt");
const dotenv = require("dotenv");

const { menus, members } = require("./const.js");
const { getDateText } = require("./utils.js");

dotenv.config();

const app = new App({
  token: process.env.BOT_TOKEN,
  signingSecret: process.env.SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.APP_TOKEN,
});

app.event("message", async ({ event, say }) => {
  const text = event.text;

  if (text.startsWith(".ÎûúÎç§")) {
    const option = text.split(".ÎûúÎç§ ")[1];
    if (/\d+Î∂Ñ/.test(option)) {
      const optionTime = option.split("Î∂Ñ")[0];
      const filteredMenus = menus.filter((menu) => menu.time <= optionTime);
      const menuIndex = Math.floor(Math.random() * filteredMenus.length);
      const selectedMenu = filteredMenus[menuIndex];

      const message = {
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: selectedMenu.store,
            },
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: `*Í±∞Î¶¨:* ${selectedMenu.distance}m  *ÏòàÏÉÅÏÜåÏöîÏãúÍ∞Ñ:* ${selectedMenu.time}Î∂Ñ`,
            },
          },
        ],
      };
      say(message);
    } else {
      const menuIndex = Math.floor(Math.random() * menus.length);
      const selectedMenu = menus[menuIndex];
      const message = {
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: selectedMenu.store,
            },
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: `*Í±∞Î¶¨:* ${selectedMenu.distance}m  *ÏòàÏÉÅÏÜåÏöîÏãúÍ∞Ñ:* ${selectedMenu.time}Î∂Ñ`,
            },
          },
        ],
      };
      say(message);
    }
  } else if (text.startsWith(".ÏÇ¨Îã§Î¶¨")) {
    const excludeMembers = text.split("ÏÇ¨Îã§Î¶¨ ")[1].split("/");

    const groups = [[], [], []];
    const shuffledNames = members
      .filter((member) => !excludeMembers.includes(member))
      .sort(() => Math.random() - 0.5);
    for (let i = 0; i < shuffledNames.length; i++) {
      groups[i % 3].push(shuffledNames[i]);
    }

    const message = {
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: `:ladder: Ï†êÏã¨ ÏÇ¨Îã§Î¶¨ :ladder:`,
            emoji: true,
          },
        },
        {
          type: "context",
          elements: [
            {
              text: `*${getDateText()}*  |  Ìú¥Í∞ÄÏûê X`,
              type: "mrkdwn",
            },
          ],
        },
        {
          type: "divider",
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text:
              "*1Ï°∞ :* " +
              `${groups[0].join(", ")}\n` +
              "*2Ï°∞ :* " +
              `${groups[1].join(", ")}\n` +
              "*3Ï°∞ :* " +
              `${groups[2].join(", ")}\n`,
          },
        },
        {
          type: "divider",
        },
        {
          type: "context",
          elements: [
            {
              type: "mrkdwn",
              text: ":pushpin: Î≤ÑÍ∑∏ Ï†úÎ≥¥ Î∞è Í∏∞Îä• ÏöîÏ≤≠ÏùÄ *Dave* ÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî. | Îã§Î•∏ Î™ÖÎ†πÏñ¥ Î≥¥Í∏∞ üëâ `.Î™ÖÎ†πÏñ¥`",
            },
          ],
        },
      ],
    };

    say(message);
  } else if (text === ".Î™ÖÎ†πÏñ¥") {
    const message = {
      blocks: [
        {
          type: "section",
          text: {
            text: "[Ï£ºÎ≥Ä ÏãùÎãπ]\n`.ÎûúÎç§` - Í∑ºÏ≤ò ÏãùÎãπÏùÑ ÎûúÎç§ÌïòÍ≤å Ï∂îÏ≤ú\n`.ÎûúÎç§ ${n}Î∂Ñ` - nÎ∂Ñ Ïù¥ÎÇ¥ ÏãùÎãπÏùÑ ÎûúÎç§ÌïòÍ≤å Ï∂îÏ≤ú (ex. `.ÎûúÎç§ 3Î∂Ñ`)",
            type: "mrkdwn",
          },
        },
        {
          type: "divider",
        },
        {
          type: "section",
          text: {
            text: "[ÏÇ¨Îã§Î¶¨ ÌÉÄÍ∏∞]\n`.ÏÇ¨Îã§Î¶¨`\n- ÏÑúÎπÑÏä§Í∞úÎ∞úÌåÄ ÏÇ¨Îã§Î¶¨ ÌÉÄÍ∏∞\n`.ÏÇ¨Îã§Î¶¨ ${ÎãâÎÑ§ÏûÑ}/${ÎãâÎÑ§ÏûÑ}`\n- ÎØ∏Ï∞∏ÏÑùÏûê Ï†úÏô∏ ÏÇ¨Îã§Î¶¨ ÌÉÄÍ∏∞ (ex `.ÏÇ¨Îã§Î¶¨ Îç∞Ïù¥Î∏å`, `.ÏÇ¨Îã§Î¶¨ Îç∞Ïù¥Î∏å/ÏÉêÎ¶¨`)",
            type: "mrkdwn",
          },
        },
      ],
    };

    say(message);
  }
});

// Start your app
(async () => {
  await app.start(3000);

  console.log("‚ö°Ô∏è Bolt app is running!");
})();
